{"version":3,"sources":["components/Loader.js","components/ErrorBoundary.js","components/User.js","pages/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["Loader","id","className","ErrorBoundary","state","hasError","this","props","children","error","Component","User","user","name","title","first","last","location","city","country","large","picture","style","src","alt","maxWidth","Homepage","userList","useContext","UsersContext","map","ind","key","phone","to","useEffect","document","FullProfile","lazy","createContext","App","useState","users","setUsers","isLoaded","setIsLoaded","setError","fetch","then","res","json","data","results","catch","err","Provider","value","fallback","path","render","Boolean","window","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"wKAUeA,EARA,WACX,OACI,yBAAKC,GAAG,UACJ,yBAAKC,UAAU,mC,gCCHNC,E,4MACjBC,MAAQ,CAAEC,UAAU,G,uDAOhB,OAAIC,KAAKF,MAAMC,SACJ,qDAIPC,KAAKC,MAAMC,Y,gDAVaC,GAC5B,MAAO,CAAEJ,UAAU,O,GAJgBK,a,OCa5BC,EAbF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACmEA,EAAlFC,KAAQC,EADO,EACPA,MAAOC,EADA,EACAA,MAAOC,EADP,EACOA,KADP,EACmEJ,EAApDK,SAAYC,EAD3B,EAC2BA,KAAMC,EADjC,EACiCA,QAAsBC,EAAYR,EAAvBS,QAAWD,MAC9E,OACI,yBAAKlB,UAAU,OAAOoB,MAAO,IACzB,yBAAKC,IAAKH,EAAOI,IAAG,UAAKT,EAAL,YAAcC,GAAQM,MAAO,CAAEG,SAAU,QAAUvB,UAAU,iBACjF,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAcY,EAA5B,IAAoCC,EAApC,IAA4CC,GAC5C,wBAAId,UAAU,cAAcgB,EAA5B,KAAoCC,MCiBrCO,EAtBE,WACb,IACMC,EADQC,qBAAWC,GACFC,KAAI,SAAClB,EAAMmB,GAC9B,OAAQ,yBAAK9B,GAAG,YAAY+B,IAAG,UAAKpB,EAAKqB,QACrC,kBAAC,IAAD,CAAMC,GAAE,iBAAYH,EAAM,IAAK,kBAAC,EAAD,CAAMnB,KAAMA,SAOnD,OAJAuB,qBAAU,WACNC,SAAStB,MAAT,cAIA,6BACI,wBAAIZ,UAAU,mCAAd,UACA,iCACKyB,K,OCbXU,EAAcC,gBAAK,kBAAM,sDAElBT,EAAeU,wBAAc,IA4C3BC,IA1Cf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEmBF,oBAAS,GAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGaJ,oBAAS,GAHtB,mBAGNhC,EAHM,KAGCqC,EAHD,KAeb,OAXAX,qBAAU,WACRY,MAAM,yCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJR,EAASQ,EAAKC,SACdP,GAAY,MACXQ,OAAM,SAAAC,GACPT,GAAY,GACZC,EAASQ,QAEZ,IACEV,GAGc,IAAVnC,EACA,8CAGP,kBAAC,EAAD,KACE,kBAACoB,EAAa0B,SAAd,CAAuBC,MAAOd,GAC5B,oCACE,kBAAC,WAAD,CAAUe,SAAU,kBAAC,EAAD,OAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMvB,GAAG,SAAShC,UAAU,wDAA5B,QACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOwD,KAAK,iBAAiBC,OAAQ,SAACpD,GAAD,OAAW,kBAAC8B,EAAgB9B,MACjE,kBAAC,IAAD,CAAOmD,KAAK,SAASC,OAAQ,kBAAM,kBAAC,EAAD,SACnC,kBAAC,IAAD,CAAOD,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,EAAD,eAfnC,kBAAC,EAAD,Q,6ICdSC,QACW,cAA7BC,OAAO5C,SAAS6C,UAEe,UAA7BD,OAAO5C,SAAS6C,UAEhBD,OAAO5C,SAAS6C,SAASC,MACvB,2D,wBCPNC,IAASL,OACP,kBAAC,IAAMM,WAAP,KACE,yBAAK/D,UAAU,aACb,kBAACsC,EAAA,EAAD,QAGJJ,SAAS8B,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdlB,OAAM,SAAA5C,GACL+D,QAAQ/D,MAAMA,EAAMgE,c","file":"static/js/main.7ee23ae8.chunk.js","sourcesContent":["import React from 'react';\n\nconst Loader = () => {\n    return (\n        <div id=\"loader\">\n            <div className=\"spinner-grow text-secondary \"></div>\n        </div>\n    )\n}\n\nexport default Loader\n","import React, { Component } from 'react'\n\nexport default class ErrorBoundary extends Component {\n    state = { hasError: false }\n\n    static getDerivedStateFromError(error) {\n        return { hasError: true }\n    }\n    render() {\n\n        if (this.state.hasError) {\n            return <h1>Something is wrong...</h1>\n        }\n\n        return (\n            this.props.children\n        )\n    }\n}\n","import React from 'react'\n\nconst User = ({ user }) => {\n    const { name: { title, first, last }, location: { city, country }, picture: { large } } = user;\n    return (\n        <div className=\"card\" style={{}}>\n            <img src={large} alt={`${first} ${last}`} style={{ maxWidth: \"100%\" }} className=\"card-img-top\" />\n            <div className=\"card-body\">\n                <h4 className=\"card-title\">{title} {first} {last}</h4>\n                <h6 className=\"card-title\">{city}, {country}</h6>\n            </div>\n        </div>\n    )\n}\n\nexport default User;\n","import React, { useContext, useEffect } from 'react'\nimport { UsersContext } from '../App'\nimport { Link } from 'react-router-dom';\nimport User from '../components/User';\nconst Homepage = () => {\n    const users = useContext(UsersContext);\n    const userList = users.map((user, ind) => {\n        return (<div id=\"user-link\" key={`${user.phone}`}>\n            <Link to={`/users/${ind + 1}`}><User user={user} /></Link>\n        </div>);\n    })\n    useEffect(() => {\n        document.title = `User App`;\n    }\n    );\n    return (\n        <div>\n            <h3 className=\"text-center text-uppercase  m-3\">Users </h3>\n            <section >\n                {userList}\n            </section>\n\n        </div>\n    )\n}\n\nexport default Homepage;\n","import React, { createContext, useState, useEffect, lazy, Suspense } from 'react';\nimport Loader from './components/Loader';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport Homepage from './pages/Homepage';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nconst FullProfile = lazy(() => import('./pages/FullProfile'));\n\nexport const UsersContext = createContext([]);\n\nfunction App() {\n  const [users, setUsers] = useState({});\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    fetch('https://randomuser.me/api/?results=50')\n      .then(res => res.json())\n      .then(data => {\n        setUsers(data.results);\n        setIsLoaded(true);\n      }).catch(err => {\n        setIsLoaded(true);\n        setError(err);\n      })\n  }, []);\n  if (!isLoaded) {\n    return <Loader />;\n  }\n  else if (error !== false) {\n    return <h1>Error in Fetch</h1>\n  }\n  return (\n    <ErrorBoundary>\n      <UsersContext.Provider value={users}>\n        <>\n          <Suspense fallback={<Loader />}>\n            <Router>\n              <Link to=\"/users\" className=\"btn btn-dark btn-block text-uppercase mt-2 mb-2 mx-0\" >Home</Link>\n              <Switch>\n                <Route path=\"/users/:userId\" render={(props) => <FullProfile {...props} />} />\n                <Route path=\"/users\" render={() => <Homepage />} />\n                <Route path=\"/\" render={() => <Homepage />} />\n              </Switch>\n            </Router>\n          </Suspense>\n        </>\n      </UsersContext.Provider>\n    </ErrorBoundary>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'jquery/dist/jquery.js';\nimport 'popper.js/dist/umd/popper.js';\nimport 'bootstrap/dist/js/bootstrap.js';\nimport './styles/styles.scss';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"container\">\n      <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}